module Text.Hatter
       ( hatter ) where

import Prelude (bind, map, pure, ($), (<>))
import Data.Either (Either)
import Data.String (joinWith)
import Text.Parsing.Parser (ParseError())
import Text.Hatter.PureScript (toCode)
import Text.Hatter.Translator (translateNode)
import Text.Hatter.Parser (Declaration(..), Module(..), parse)

version :: String
version = "0.0.1"

hatter :: Array String -> String -> Either ParseError String
hatter imports input = do
  (Module decs) <- parse input
  pure $ "-- Generated by hatter " <> version <> "\n" <>
    (joinWith "" $
     map translateDeclaration decs <> map (\i -> "import " <> i <> "\n") imports)
  where translateDeclaration (Declaration d) =
          d.rawCode <> "  " <> (toCode $ translateNode d.body) <> "\n\n"
